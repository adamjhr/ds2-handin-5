// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendToServerClient is the client API for FrontendToServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendToServerClient interface {
	// send message
	FrontendBid(ctx context.Context, in *FrontendBidRequest, opts ...grpc.CallOption) (*FrontendAck, error)
	FrontendResult(ctx context.Context, in *FrontendResultRequest, opts ...grpc.CallOption) (*FrontendResultReply, error)
	FrontendNewAuction(ctx context.Context, in *FrontendNewAuctionRequest, opts ...grpc.CallOption) (*FrontendNewAuctionReply, error)
}

type frontendToServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendToServerClient(cc grpc.ClientConnInterface) FrontendToServerClient {
	return &frontendToServerClient{cc}
}

func (c *frontendToServerClient) FrontendBid(ctx context.Context, in *FrontendBidRequest, opts ...grpc.CallOption) (*FrontendAck, error) {
	out := new(FrontendAck)
	err := c.cc.Invoke(ctx, "/proto.FrontendToServer/FrontendBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendToServerClient) FrontendResult(ctx context.Context, in *FrontendResultRequest, opts ...grpc.CallOption) (*FrontendResultReply, error) {
	out := new(FrontendResultReply)
	err := c.cc.Invoke(ctx, "/proto.FrontendToServer/FrontendResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendToServerClient) FrontendNewAuction(ctx context.Context, in *FrontendNewAuctionRequest, opts ...grpc.CallOption) (*FrontendNewAuctionReply, error) {
	out := new(FrontendNewAuctionReply)
	err := c.cc.Invoke(ctx, "/proto.FrontendToServer/FrontendNewAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendToServerServer is the server API for FrontendToServer service.
// All implementations must embed UnimplementedFrontendToServerServer
// for forward compatibility
type FrontendToServerServer interface {
	// send message
	FrontendBid(context.Context, *FrontendBidRequest) (*FrontendAck, error)
	FrontendResult(context.Context, *FrontendResultRequest) (*FrontendResultReply, error)
	FrontendNewAuction(context.Context, *FrontendNewAuctionRequest) (*FrontendNewAuctionReply, error)
	mustEmbedUnimplementedFrontendToServerServer()
}

// UnimplementedFrontendToServerServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendToServerServer struct {
}

func (UnimplementedFrontendToServerServer) FrontendBid(context.Context, *FrontendBidRequest) (*FrontendAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendBid not implemented")
}
func (UnimplementedFrontendToServerServer) FrontendResult(context.Context, *FrontendResultRequest) (*FrontendResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendResult not implemented")
}
func (UnimplementedFrontendToServerServer) FrontendNewAuction(context.Context, *FrontendNewAuctionRequest) (*FrontendNewAuctionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrontendNewAuction not implemented")
}
func (UnimplementedFrontendToServerServer) mustEmbedUnimplementedFrontendToServerServer() {}

// UnsafeFrontendToServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendToServerServer will
// result in compilation errors.
type UnsafeFrontendToServerServer interface {
	mustEmbedUnimplementedFrontendToServerServer()
}

func RegisterFrontendToServerServer(s grpc.ServiceRegistrar, srv FrontendToServerServer) {
	s.RegisterService(&FrontendToServer_ServiceDesc, srv)
}

func _FrontendToServer_FrontendBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendToServerServer).FrontendBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FrontendToServer/FrontendBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendToServerServer).FrontendBid(ctx, req.(*FrontendBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendToServer_FrontendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendToServerServer).FrontendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FrontendToServer/FrontendResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendToServerServer).FrontendResult(ctx, req.(*FrontendResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendToServer_FrontendNewAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrontendNewAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendToServerServer).FrontendNewAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FrontendToServer/FrontendNewAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendToServerServer).FrontendNewAuction(ctx, req.(*FrontendNewAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendToServer_ServiceDesc is the grpc.ServiceDesc for FrontendToServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendToServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FrontendToServer",
	HandlerType: (*FrontendToServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FrontendBid",
			Handler:    _FrontendToServer_FrontendBid_Handler,
		},
		{
			MethodName: "FrontendResult",
			Handler:    _FrontendToServer_FrontendResult_Handler,
		},
		{
			MethodName: "FrontendNewAuction",
			Handler:    _FrontendToServer_FrontendNewAuction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

// ClientToFrontendClient is the client API for ClientToFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientToFrontendClient interface {
	// send message
	ClientBid(ctx context.Context, in *ClientBidRequest, opts ...grpc.CallOption) (*ClientAck, error)
	ClientResult(ctx context.Context, in *ClientResultRequest, opts ...grpc.CallOption) (*ClientResultReply, error)
	ClientNewAuction(ctx context.Context, in *ClientNewAuctionRequest, opts ...grpc.CallOption) (*ClientNewAuctionReply, error)
}

type clientToFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewClientToFrontendClient(cc grpc.ClientConnInterface) ClientToFrontendClient {
	return &clientToFrontendClient{cc}
}

func (c *clientToFrontendClient) ClientBid(ctx context.Context, in *ClientBidRequest, opts ...grpc.CallOption) (*ClientAck, error) {
	out := new(ClientAck)
	err := c.cc.Invoke(ctx, "/proto.ClientToFrontend/ClientBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToFrontendClient) ClientResult(ctx context.Context, in *ClientResultRequest, opts ...grpc.CallOption) (*ClientResultReply, error) {
	out := new(ClientResultReply)
	err := c.cc.Invoke(ctx, "/proto.ClientToFrontend/ClientResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToFrontendClient) ClientNewAuction(ctx context.Context, in *ClientNewAuctionRequest, opts ...grpc.CallOption) (*ClientNewAuctionReply, error) {
	out := new(ClientNewAuctionReply)
	err := c.cc.Invoke(ctx, "/proto.ClientToFrontend/ClientNewAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientToFrontendServer is the server API for ClientToFrontend service.
// All implementations must embed UnimplementedClientToFrontendServer
// for forward compatibility
type ClientToFrontendServer interface {
	// send message
	ClientBid(context.Context, *ClientBidRequest) (*ClientAck, error)
	ClientResult(context.Context, *ClientResultRequest) (*ClientResultReply, error)
	ClientNewAuction(context.Context, *ClientNewAuctionRequest) (*ClientNewAuctionReply, error)
	mustEmbedUnimplementedClientToFrontendServer()
}

// UnimplementedClientToFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedClientToFrontendServer struct {
}

func (UnimplementedClientToFrontendServer) ClientBid(context.Context, *ClientBidRequest) (*ClientAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientBid not implemented")
}
func (UnimplementedClientToFrontendServer) ClientResult(context.Context, *ClientResultRequest) (*ClientResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientResult not implemented")
}
func (UnimplementedClientToFrontendServer) ClientNewAuction(context.Context, *ClientNewAuctionRequest) (*ClientNewAuctionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientNewAuction not implemented")
}
func (UnimplementedClientToFrontendServer) mustEmbedUnimplementedClientToFrontendServer() {}

// UnsafeClientToFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientToFrontendServer will
// result in compilation errors.
type UnsafeClientToFrontendServer interface {
	mustEmbedUnimplementedClientToFrontendServer()
}

func RegisterClientToFrontendServer(s grpc.ServiceRegistrar, srv ClientToFrontendServer) {
	s.RegisterService(&ClientToFrontend_ServiceDesc, srv)
}

func _ClientToFrontend_ClientBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToFrontendServer).ClientBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClientToFrontend/ClientBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToFrontendServer).ClientBid(ctx, req.(*ClientBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToFrontend_ClientResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToFrontendServer).ClientResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClientToFrontend/ClientResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToFrontendServer).ClientResult(ctx, req.(*ClientResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToFrontend_ClientNewAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientNewAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToFrontendServer).ClientNewAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ClientToFrontend/ClientNewAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToFrontendServer).ClientNewAuction(ctx, req.(*ClientNewAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientToFrontend_ServiceDesc is the grpc.ServiceDesc for ClientToFrontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientToFrontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ClientToFrontend",
	HandlerType: (*ClientToFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientBid",
			Handler:    _ClientToFrontend_ClientBid_Handler,
		},
		{
			MethodName: "ClientResult",
			Handler:    _ClientToFrontend_ClientResult_Handler,
		},
		{
			MethodName: "ClientNewAuction",
			Handler:    _ClientToFrontend_ClientNewAuction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
